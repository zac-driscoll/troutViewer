usethis::use_package( "shiny" )
usethis::use_package( "shinydashboard" )
golem::fill_desc(
pkg_name = "troutViewer", # The Name of the package containing the App
pkg_title = "Trout Viewer", # The Title of the package containing the App
pkg_description = "Package to view trout.", # The Description of the package containing the App
author_first_name = "Zac", # Your First Name
author_last_name = "Driscoll", # Your Last Name
author_email = "zgdriscoll@gmail.com", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
## Create Common Files ----
## See ?usethis for more information
usethis::use_mit_license( "Golem User" )  # You can set another license here
usethis::use_readme_rmd( open = FALSE )
usethis::use_code_of_conduct()
usethis::use_lifecycle_badge( "Experimental" )
## Init Testing Infrastructure ----
## Create a template for tests
golem::use_recommended_tests()
## Use Recommended Packages ----
golem::use_recommended_deps()
usethis::use_package( "shiny" )
usethis::use_package( "shinydashboard" )
usethis::use_package("ggplot2")
usethis::use_package("dplyr")
usethis::use_package("DT")
usethis::use_package("plotly")
## Vignette ----
usethis::use_vignette("troutViewer")
---
title: "troutViewer"
output: rmarkdown::html_vignette
vignette: >
%\VignetteIndexEntry{troutViewer}
%\VignetteEngine{knitr::rmarkdown}
%\VignetteEncoding{UTF-8}
---
usethis::use_package("shinyipsum")
install.packages("shinipsum")
usethis::use_package("shinipsum")
usethis::use_package("trout.modlR")
devtools::install()
devtools::install()
devtools::install()
devtools::load_all(0)
devtools::load_all()
run_app()
devtools::load_all()
run_app()
#' ui
#'
#' @param request needed for bookmarking
#'
#' @import shiny
#' @import shinydashboard
app_ui <- function(request) {
tagList(
# Leave this function for adding external resources
# golem_add_external_resources(),
# List the first level UI elements here
shinydashboard::dashboardPage(
shinydashboard::dashboardHeader(title = "Basic dashboard"),
shinydashboard::dashboardSidebar(
shinydashboard::sidebarMenu(
shinydashboardmenuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
shinydashboardmenuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
),
shinydashboard::dashboardBody(
shinydashboard::tabItems(
# First tab content
shinydashboard::tabItem(tabName = "dashboard",
shiny::fluidRow(
shinydashboard::box(plotOutput("plot1", height = 250)),
shinydashboard::box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
shinydashboard::tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
)
}
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
shinydashboard::menuItem()
devtools::load_all()
shinydashboard::menuItem()
shinydashboard::menuItem()
run_app()
devtools::load_all()
devtools::load_all()
run_app()
troutViewer::run_app()
run_app()
run_app()
shinipsum::random_ggplotly()
shinipsum::random_ggplotly()
shinipsum::random_ggplotly()
shinipsum::random_ggplotly()
## Add modules ----
## Create a module infrastructure in R/
golem::add_module( name = "ipsum_plot" ) # Name of the module
devtools::load_all()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
golem::add_module( name = "load_data" ) # Name of the module
devtools::load_all()
run_app()
run_app()
devtools::load_all()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
golem::add_module( name = "ipsum_select_input" ) # Name of the module
run_app()
devtools::load_all()
run_app()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
golem::add_module( name = "ipsum_table" ) #Ipsum table
mod_ipsum_table_server("ipsum_table_ui_1")
devtools::load_all()
devtools::load_all()
mod_ipsum_table_server("ipsum_table_ui_1")
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
run_app()
(name = "ipsum_biomss_input")
rm(name)
golem::add_module(name = "ipsum_biomss_input")
getwd()
golem::add_module(name = "ipsum_biomss_input")
devtools::load_all()
golem::add_module(name = "ipsum_biomss_input")
devtools::load_all()
golem::add_module(name = "ipsum_biomss_input")
getwd()
golem::add_module(name = "ipsum_biomss_input")
ipsum_biomss_input
golem::add_module(name = "ipsum_biomss_input")
getwd()
setwd("~/R/Rpackages/troutViewer")
golem::add_module(name = "ipsum_biomss_input")
setwd("~/R/Rpackages/troutViewer/R")
getwd()
golem::add_module(name = "ipsum_biomss_input")
dir()
ls
di
dir()
setwd("~/R/Rpackages/troutViewer")
dir()
golem::add_module(name = "ipsum_biomss_input")
